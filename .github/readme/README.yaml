module_name: "Wrapper RDS Aurora"
module_description: "A comprehensive Terraform module for provisioning and managing Amazon RDS Aurora clusters with advanced features including database management, automated backups, DNS integration, and security configurations."
quick_start: |
  ```hcl
  rds_parameters = {
    ## Nombre y definici√≥n de una instancia RDS
    "00" = {
      
      ## Definiciones para la creaci√≥n del motor
      engine                 = "mariadb"
      engine_version         = "10.6.14"
      instance_class         = "db.t3.micro"
      deletion_protection    = true
      publicly_accessible    = false
      
      ## Definici√≥n de subnets sobre las cuales se desplegar√° y acceder√° al motor
      ## Definido por ids
      subnet_ids             = data.aws_subnets.public.ids
      ## Definido por nombre
      # subnet_name = "${local.common_name_prefix}-db*" # Default: "${local.common_name_prefix}-private*"
      
      ## Reglas de acceso para el recurso
      ingress_with_cidr_blocks = [
        {
          rule        = "mysql-tcp"
          cidr_blocks = "172.1.0.0/16"
        }
      ]
      
      ## Definici√≥n de tama√±o y tipo de storage para el motor
      allocated_storage     = 5
      max_allocated_storage = 10
      storage_type          = null
      
      ## Parametros que utilizara el motor
      parameters = [
        {
          name  = "max_connections"
          value = "150"
        }
      ]
      ## Definiciones de ventanas de mantenimiento y backup
      maintenance_window      = "Sun:04:00-Sun:06:00"
      backup_window           = "03:00-03:30"
      backup_retention_period = "7"
      apply_immediately       = false
      
      ## Habilitaci√≥n y retenci√≥n de servicio de performance insights
      #performance_insights_enabled           = false
      #performance_insights_retention_period  = 7
    }
  }

  rds_defaults = var.rds_defaults
  ```
features:
  - icon: "üóÑÔ∏è"
    title: "Database Management"
    short_description: "Automated database and user management with MySQL and PostgreSQL support, credentials stored in Parameter Store"
    long_description: |
      Deploys a Lambda function that manages the creation and modification of *Users*, *Databases* and their access permissions.
      Access credentials are stored in **Parameter Store**.
      Sends notifications of completed operations.
      **Important**: Does not perform deletion of databases or users - users will remain without permissions on resources.
    examples:
      - title: "MySQL / MariaDB Code"
        code: |
          ```hcl
          rds_parameters = {
            "mysql" = {
              ...
              enable_db_management                    = true
              enable_db_management_logs_notifications = true
              db_management_parameters = {
                databases = [
                  {
                    name    = "mydb1"
                    charset = "utf8mb4"
                    collate = "utf8mb4_general_ci"
                  },
                  {
                    name    = "mydb2"
                    charset = "utf8mb4"
                    collate = "utf8mb4_general_ci"
                  }
                ],
                users = [
                  {
                    username = "user1"
                    host     = "%"
                    password = "password1"
                    grants = [
                      {
                        database   = "mydb1"
                        table      = "*"
                        privileges = "ALL"
                      },
                      {
                        database   = "mydb2"
                        table      = "*"
                        privileges = "SELECT, UPDATE"
                      }
                    ]
                  },
                  {
                    username = "user2"
                    host     = "%"
                    password = "password2"
                    grants = [
                      {
                        database   = "mydb2"
                        table      = "*"
                        privileges = "ALL"
                      }
                    ]
                  }
                ],
                excluded_users = ["rdsadmin", "root", "mariadb.sys", "healthcheck", "rds_superuser_role", "mysql.infoschema", "mysql.session", "mysql.sys"]
              }
              ...
            }
          }
          ```
      - title: "PostgreSQL Code"
        code: |
          ```hcl
          rds_parameters = {
            "postgresql" = {
              ...
              enable_db_management                    = true
              enable_db_management_logs_notifications = true
              db_management_parameters = {
                databases = [
                  {
                    "name" : "db1",
                    "owner" : "root",
                    "schemas" : [
                      {
                        "name" : "public",
                        "owner" : "root"
                      },
                      {
                        "name" : "schema1",
                        "owner" : "usr1"
                      }
                    ]
                  },
                  {
                    "name" : "db2",
                    "owner" : "usr2",
                  },
                  {
                    "name" : "db3",
                    "owner" : "usr3",
                  }
                ],
                roles = [
                  { "rolename" : "example_role_1" },
                  { "rolename" : "example_role_2" }
                ],
                users = [
                  {
                    "username" : "usr1",
                    "password" : "passwd1",
                    "grants" : [
                      {
                        "database" : "db1",
                        "schema" : "public",
                        "privileges" : "ALL PRIVILEGES",
                        "table" : "*"
                      }
                    ]
                  },
                  {
                    "username" : "usr2",
                    "password" : "passwd2",
                    "grants" : [
                      {
                        "privileges" : "example_role_1",
                        "options" : "WITH SET TRUE"
                      },
                      {
                        "privileges" : "example_role_2",
                        "options" : "WITH SET TRUE"
                      }
                    ]
                  },
                  {
                    "username" : "usr3",
                    "password" : "passwd3",
                    "grants" : []
                  }
                ],
                excluded_users = ["rdsadmin", "root", "healthcheck"]
              }
              ...
            }
          }
          ```
inputs_plain: |
  | instance_class    | Tipo de instancia para la base de datos | string | db.t3.micro | no |
  | allocated_storage | Almacenamiento asignado (GB)            | number | 20          | no |
inputs_yaml:
  - name: "instance_classYAML"
    description: "Tipo de instancia para la base de datos"
    type: "string"
    default: "db.t3.micro"
    required: "no"
  - name: "allocated_storageYAML"
    description: "Almacenamiento asignado (GB)"
    type: "number"
    default: 20
    required: "no"
# outputs_table: |
#   | Output | Description |
#   |--------|-------------|
#   | ...    | ...         |
examples: |
  - **Complete Example**: Full implementation with MySQL and PostgreSQL clusters, including database management, backups, DNS records, and security configurations
important_warnings: |
  - **üö® Restart Engine**: Restart the engine during parameter group changes - set `apply_immediately = true`
  - **üåê Public Access**: Exposes the resource to the internet - use `publicly_accessible = true` with caution 